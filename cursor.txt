Я предоставлю тебе курсоры написанные на Oracle, тебе нужно будет их переписать на PostGree:
1. Отобразите c 5-го по 10-го сотрудников из таблицы «Сотрудники».
declare

     cursor empcur is
        select employee_id, first_name 
        from employees;
        
begin
     for emprec  in empcur
     loop
         if empcur%rowcount > 4 then
              dbms_output.put_line( emprec.first_name);
              exit  when   empcur%rowcount > 10;
         end if;
     end loop;
     
end;

2.Показать должность и имя сотрудника, который работает первый день.
declare
       cursor  jobscur is select  job_id, job_title from jobs;
	   v_name  employees.first_name%type;
begin
       for jobrec in jobscur
	   loop
	         select first_name into v_name
             from employees
             where hire_date = ( select min(hire_date) from employees where job_id = jobrec.job_id)
			 and  job_id = jobrec.job_id;
             			 
             dbms_output.put_line( jobrec.job_title || '-' || v_name); 						  
	   end loop;
end;

3.Обновление зарплаты сотрудника в зависимости от отдела и процента комиссии. Если отдел - 40, увеличьте зарплату на 10%. Если отдел - 70, то на 15%, если комиссия больше 0,3%, то 5%, в противном случае 10%.
declare
    cursor empcur is
     select employee_id, department_id, commission_pct
     from employees;
	 
    v_hike  number(2);
begin

    for emprec in empcur
    loop
         if  emprec.department_id = 40 then
              v_hike := 10;
         elsif emprec.department_id = 70 then
              v_hike := 15;
         elsif emprec.commission_pct  > 0.30 then
              v_hike := 5;
         else
              v_hike := 10;
         end if;

         update employees set salary = salary + salary * v_hike/100 
         where employee_id = emprec.employee_id;
         
    end loop;
end;

4.Создайте функцию, которая принимает идентификатор менеджера и возвращает имена сотрудников, которые отчитываются перед этим менеджером. Имена должны быть возвращены в виде строки с запятыми, разделяющими имена.
create or replace function get_employees_for_manager(manager number)
return varchar2
is
   v_employees varchar2(1000) := '';
   cursor empcur is
      select  first_name from employees 
      where   manager_id = manager;
begin

     for emprec in empcur
     loop
         v_employees :=  v_employees ||  ',' || emprec.first_name;
     end loop;
     -- remove extra  , at the beginning
     return  ltrim(v_employees,',');
end;



1.
CREATE OR REPLACE FUNCTION get_employees_range()
RETURNS TABLE(position INT, employee_id INT, first_name TEXT)
LANGUAGE plpgsql
AS $$
DECLARE
    cnt INT := 0;
    rec RECORD;
BEGIN
    FOR rec IN
        SELECT employee_id, first_name
        FROM employees
        ORDER BY employee_id
    LOOP
        cnt := cnt + 1;
        IF cnt BETWEEN 5 AND 10 THEN
            position := cnt;
            employee_id := rec.employee_id;
            first_name := rec.first_name;
            RETURN NEXT;
        ELSIF cnt > 10 THEN
            EXIT;
        END IF;
    END LOOP;
END;
$$;


SELECT * FROM get_employees_range();


2. 
CREATE OR REPLACE FUNCTION first_hire_by_job()
RETURNS TABLE(job_id TEXT, job_title TEXT, first_name TEXT)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT j.job_id,
           j.job_title,
           e.first_name
    FROM jobs j
    JOIN LATERAL (
        SELECT first_name
        FROM employees e
        WHERE e.job_id = j.job_id
        ORDER BY hire_date
        LIMIT 1
    ) AS e ON TRUE
    ORDER BY j.job_id;
END;
$$;


SELECT * FROM first_hire_by_job();


3.
CREATE OR REPLACE FUNCTION apply_salary_hikes()
RETURNS INTEGER
LANGUAGE plpgsql
AS $$
DECLARE
    emp_rec RECORD;
    v_hike NUMERIC;
    updated_count INT := 0;
BEGIN
    FOR emp_rec IN
        SELECT employee_id, department_id, commission_pct
        FROM employees
    LOOP
        IF emp_rec.department_id = 40 THEN
            v_hike := 0.10;
        ELSIF emp_rec.department_id = 70 THEN
            v_hike := 0.15;
        ELSIF emp_rec.commission_pct > 0.30 THEN
            v_hike := 0.05;
        ELSE
            v_hike := 0.10;
        END IF;

        UPDATE employees
        SET salary = salary * (1 + v_hike)
        WHERE employee_id = emp_rec.employee_id;

        GET DIAGNOSTICS updated_count = updated_count + ROW_COUNT;
    END LOOP;

    RETURN updated_count;
END;
$$;


-- Сколько сотрудников получили повышение?
SELECT apply_salary_hikes();
-- Проверить изменения:
SELECT employee_id, salary
FROM employees
WHERE department_id IN (40,70) OR commission_pct > 0.30
ORDER BY employee_id
LIMIT 10;


4.
CREATE OR REPLACE FUNCTION get_employees_for_manager(p_manager INT)
RETURNS TEXT
LANGUAGE plpgsql
AS $$
DECLARE
    v_employees TEXT;
BEGIN
    SELECT COALESCE(string_agg(first_name, ','), '')
    INTO   v_employees
    FROM   employees
    WHERE  manager_id = p_manager;

    RETURN v_employees;
END;
$$;


SELECT get_employees_for_manager(108);

