ЗАДАНИЕ: ВЫПОЛНИТЬ ОПЕРАЦИИ В PostgreSQL 
(создать таблицы и выполнить операции реляционной алгебры)
Пример 2-2. Внутреннее соединение
Давайте посмотрим на таблицы, которые получаются в результате шагов, необходимых для объединения. Пусть даны следующие две таблицы:
         R   A | B | C      S   C | D | E
            ---+---+---        ---+---+---
             1 | 2 | 3          3 | a | b
             4 | 5 | 6          6 | c | d
             7 | 8 | 9
	 
Во-первых, мы вычислим декартово произведение R × S и получим:
       R x S   A | B | R.C | S.C | D | E
              ---+---+-----+-----+---+---
               1 | 2 |  3  |  3  | a | b
               1 | 2 |  3  |  6  | c | d
               4 | 5 |  6  |  3  | a | b
               4 | 5 |  6  |  6  | c | d
               7 | 8 |  9  |  3  | a | b
               7 | 8 |  9  |  6  | c | d
	
После выборки σR.C=S.C(R × S) получим:
               A | B | R.C | S.C | D | E
              ---+---+-----+-----+---+---
               1 | 2 |  3  |  3  | a | b
               4 | 5 |  6  |  6  | c | d
Удалить повторяющуюся колонку S.C можно с помощью проекции следующей операцией: πR.A,R.B,R.C,S.D,S.E(σR.C=S.C(R × S)) и получим:
                   A | B | C | D | E
                  ---+---+---+---+---
                   1 | 2 | 3 | a | b
                   4 | 5 | 6 | c | d
	
•	ДЕЛЕНИЕ(DIVIDE) (÷): Пусть R будет таблицей с атрибутами A, B, C, и D и пусть S будет таблицей с атрибутами C и D. Мы можем определить деление как: R ÷ S = {t ∣ ∀ ts ∈ S ∃ tr ∈ R так, что tr(A,B)=t∧tr(C,D)=ts} где tr(x,y) означает кортеж таблицы R, который состоит только из элементов x и y. Заметим, что кортеж t состоит только из элементов A и B отношения R.
Зададим следующие таблицы
          R   A | B | C | D        S   C | D
             ---+---+---+---          ---+---
              a | b | c | d            c | d
              a | b | e | f            e | f
              b | c | e | f
              e | d | c | d
              e | d | e | f
              a | b | d | e
	
R ÷ S получается
                         A | B
                        ---+---
                         a | b
                         e | d


-- Создание таблиц и вставка данных для внутреннего соединения:

-- Таблица R
CREATE TABLE R (
    A INTEGER,
    B INTEGER,
    C INTEGER
);

INSERT INTO R (A, B, C) VALUES
(1, 2, 3),
(4, 5, 6),
(7, 8, 9);

-- Таблица S
CREATE TABLE S (
    C INTEGER,
    D VARCHAR(10),
    E VARCHAR(10)
);

INSERT INTO S (C, D, E) VALUES
(3, 'a', 'b'),
(6, 'c', 'd');

-- Проверка созданных таблиц
SELECT * FROM R;
SELECT * FROM S;

-- Внутреннее соединение:
SELECT R.A, R.B, R.C, S.D, S.E
FROM R
INNER JOIN S ON R.C = S.C;

-- Создание таблиц и вставка данных для деления:

-- Таблица R для деления
CREATE TABLE R_divide (
    A VARCHAR(10),
    B VARCHAR(10),
    C VARCHAR(10),
    D VARCHAR(10)
);

INSERT INTO R_divide (A, B, C, D) VALUES
('a', 'b', 'c', 'd'),
('a', 'b', 'e', 'f'),
('b', 'c', 'e', 'f'),
('e', 'd', 'c', 'd'),
('e', 'd', 'e', 'f'),
('a', 'b', 'd', 'e');

-- Таблица S для деления
CREATE TABLE S_divide (
    C VARCHAR(10),
    D VARCHAR(10)
);

INSERT INTO S_divide (C, D) VALUES
('c', 'd'),
('e', 'f');

-- Проверка созданных таблиц
SELECT * FROM R_divide;
SELECT * FROM S_divide;

-- Деление (вариант 1: с использованием NOT EXISTS):
SELECT DISTINCT R.A, R.B
FROM R_divide R
WHERE NOT EXISTS (
    SELECT *
    FROM S_divide S
    WHERE NOT EXISTS (
        SELECT *
        FROM R_divide R2
        WHERE R2.A = R.A AND R2.B = R.B AND R2.C = S.C AND R2.D = S.D
    )
);

-- Деление (вариант 2: с использованием агрегации и HAVING):
SELECT A, B
FROM R_divide
GROUP BY A, B
HAVING COUNT(*) = (SELECT COUNT(*) FROM S_divide)
   AND EVERY(EXISTS (SELECT 1 FROM S_divide WHERE R_divide.C = S_divide.C AND R_divide.D = S_divide.D));

-- Очистка (удаление таблиц)
DROP TABLE IF EXISTS R;
DROP TABLE IF EXISTS S;
DROP TABLE IF EXISTS R_divide;
DROP TABLE IF EXISTS S_divide;
