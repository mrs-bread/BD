Схема базы данных в PostgreSQL.
CREATE TABLE regions
    ( region_id      SERIAL primary key,       
      region_name    VARCHAR(25) 
    );

CREATE TABLE countries 
    ( country_id      CHAR(2) not null PRIMARY KEY       
    , country_name    VARCHAR(40) 
    , region_id       INTEGER  REFERENCES regions(region_id)
    ); 

CREATE TABLE locations
    ( location_id    SERIAL PRIMARY KEY
    , street_address VARCHAR(40)
    , postal_code    VARCHAR(12)
    , city       VARCHAR(30) NOT NULL        
    , state_province VARCHAR(25)
    , country_id     CHAR(2) REFERENCES countries (country_id)
    ) ;

CREATE TABLE departments
    ( department_id    SERIAL PRIMARY KEY
    , department_name  VARCHAR(30) NOT NULL        
    , manager_id       INTEGER
    , location_id      INTEGER references locations (location_id)
    ) ;

CREATE TABLE jobs
    ( job_id         VARCHAR(10) PRIMARY KEY
    , job_title      VARCHAR(35) NOT NULL
    , min_salary     NUMERIC(6)
    , max_salary     NUMERIC(6)
    ) ;

CREATE TABLE employees
    ( employee_id    SERIAL PRIMARY KEY
    , first_name     VARCHAR(20)
    , last_name      VARCHAR(25) NOT NULL
    , email          VARCHAR(25) NOT NULL
    , phone_number   VARCHAR(20)
    , hire_date      TIMESTAMP  NOT NULL
    , job_id         VARCHAR(10) NOT NULL REFERENCES jobs(job_id)
    , salary         NUMERIC(8,2)
    , commission_pct NUMERIC(2,2)
    , manager_id     INTEGER REFERENCES employees(employee_id)
    , department_id  INTEGER REFERENCES departments(department_id)
    , CONSTRAINT     emp_salary_min
                     CHECK (salary > 0) 
    , CONSTRAINT     emp_email_uk
                     UNIQUE (email)
    ) ;

ALTER TABLE DEPARTMENTS ADD CONSTRAINT dept_mgr_fk
                 FOREIGN KEY (manager_id)
                  REFERENCES employees (employee_id);

CREATE TABLE job_history
    ( employee_id   INTEGER NOT NULL REFERENCES employees(employee_id)
    , start_date    TIMESTAMP NOT NULL
    , end_date      TIMESTAMP NOT NULL        
    , job_id        VARCHAR(10) NOT NULL REFERENCES jobs(job_id)
    , department_id INTEGER REFERENCES departments(department_id)
    , CONSTRAINT    jhist_date_interval
                    CHECK (end_date > start_date)
    , PRIMARY KEY (employee_id, start_date)
    ) ;
Я её заполнил значниями. Твоя задача написать мне запросы следующие:
1.	Выведите список всех должностей в отделе 80 (должности в списке не должны повторяться (DISTINCT)) и местоположение.
2.	Вывести фамилии, названия отдела, город и местоположение отделов, для всех служащих, зарабатывающих комиссионные.
3.	Вывести фамилии служащих, содержащие буквы «а» (в строчном регистре), с названиями отделов.
4.	Напишите запрос для вывода фамилии, должности, номера отдела и названия отдела всех служащих, работающих в городе Toronto.
5.	Вывести фамилии и номера служащих вместе с фамилиями и номерами их менеджеров. Назовите столбцы Employee, Emp#, Manager, MGR#.
6.	Измените запрос 5 так, чтобы получить фамилии всех служащих, включая Кинга, который не имеет менеджера. Упорядочьте результат по возрастанию номера служащего.
7.	Создайте запрос для вывода номера отдела, фамилии служащего и фамилий всех служащих, работающих в одном отделе с данным служащим. Дайте столбцам соответствующие имена.
8.	Создайте запрос для вывода фамилии, должности, названия отдела, оклада  всех служащих.
9.	Создайте запрос для вывода фамилий и дат найма всех служащих, нанятых после Davies. (запрос выполнить используя декартово произведение, с использованием данной фамилии).
10.	По всем служащим, нанятым раньше своих менеджеров, выведите фамилии и даты найма самих служащих, а также фамилии и даты найма их менеджеров.

SELECT DISTINCT j.job_title, l.city, l.state_province
FROM employees e
JOIN jobs j ON e.job_id = j.job_id
JOIN departments d ON e.department_id = d.department_id
JOIN locations l ON d.location_id = l.location_id
WHERE e.department_id = 80;


SELECT e.last_name, d.department_name, l.city, l.state_province
FROM employees e
JOIN departments d ON e.department_id = d.department_id
JOIN locations l ON d.location_id = l.location_id
WHERE e.commission_pct IS NOT NULL;


SELECT e.last_name, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id
WHERE e.last_name LIKE '%a%';


SELECT e.last_name, j.job_title, e.department_id, d.department_name
FROM employees e
JOIN jobs j ON e.job_id = j.job_id
JOIN departments d ON e.department_id = d.department_id
JOIN locations l ON d.location_id = l.location_id
WHERE l.city = 'Toronto';


SELECT e.last_name AS "Employee", e.employee_id AS "Emp#", 
       m.last_name AS "Manager", m.employee_id AS "MGR#"
FROM employees e
LEFT JOIN employees m ON e.manager_id = m.employee_id;


SELECT e.last_name AS "Employee", e.employee_id AS "Emp#", 
       m.last_name AS "Manager", m.employee_id AS "MGR#"
FROM employees e
LEFT JOIN employees m ON e.manager_id = m.employee_id
ORDER BY e.employee_id;


SELECT e.department_id AS "Department", e.last_name AS "Employee",
       c.last_name AS "Colleague"
FROM employees e
JOIN employees c ON e.department_id = c.department_id
WHERE e.employee_id != c.employee_id
ORDER BY e.department_id, e.last_name, c.last_name;


SELECT e.last_name, j.job_title, d.department_name, e.salary
FROM employees e
JOIN jobs j ON e.job_id = j.job_id
JOIN departments d ON e.department_id = d.department_id;


SELECT e.last_name, e.hire_date
FROM employees e, employees d
WHERE d.last_name = 'Davies' 
AND e.hire_date > d.hire_date;


SELECT e.last_name AS "Employee", e.hire_date AS "Emp Hire Date",
       m.last_name AS "Manager", m.hire_date AS "Mgr Hire Date"
FROM employees e
JOIN employees m ON e.manager_id = m.employee_id
WHERE e.hire_date < m.hire_date;
