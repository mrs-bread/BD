Схема базы данных в PostgreSQL.
CREATE TABLE regions
    ( region_id      SERIAL primary key,       
      region_name    VARCHAR(25) 
    );

CREATE TABLE countries 
    ( country_id      CHAR(2) not null PRIMARY KEY       
    , country_name    VARCHAR(40) 
    , region_id       INTEGER  REFERENCES regions(region_id)
    ); 

CREATE TABLE locations
    ( location_id    SERIAL PRIMARY KEY
    , street_address VARCHAR(40)
    , postal_code    VARCHAR(12)
    , city       VARCHAR(30) NOT NULL        
    , state_province VARCHAR(25)
    , country_id     CHAR(2) REFERENCES countries (country_id)
    ) ;

CREATE TABLE departments
    ( department_id    SERIAL PRIMARY KEY
    , department_name  VARCHAR(30) NOT NULL        
    , manager_id       INTEGER
    , location_id      INTEGER references locations (location_id)
    ) ;

CREATE TABLE jobs
    ( job_id         VARCHAR(10) PRIMARY KEY
    , job_title      VARCHAR(35) NOT NULL
    , min_salary     NUMERIC(6)
    , max_salary     NUMERIC(6)
    ) ;

CREATE TABLE employees
    ( employee_id    SERIAL PRIMARY KEY
    , first_name     VARCHAR(20)
    , last_name      VARCHAR(25) NOT NULL
    , email          VARCHAR(25) NOT NULL
    , phone_number   VARCHAR(20)
    , hire_date      TIMESTAMP  NOT NULL
    , job_id         VARCHAR(10) NOT NULL REFERENCES jobs(job_id)
    , salary         NUMERIC(8,2)
    , commission_pct NUMERIC(2,2)
    , manager_id     INTEGER REFERENCES employees(employee_id)
    , department_id  INTEGER REFERENCES departments(department_id)
    , CONSTRAINT     emp_salary_min
                     CHECK (salary > 0) 
    , CONSTRAINT     emp_email_uk
                     UNIQUE (email)
    ) ;

ALTER TABLE DEPARTMENTS ADD CONSTRAINT dept_mgr_fk
                 FOREIGN KEY (manager_id)
                  REFERENCES employees (employee_id);

CREATE TABLE job_history
    ( employee_id   INTEGER NOT NULL REFERENCES employees(employee_id)
    , start_date    TIMESTAMP NOT NULL
    , end_date      TIMESTAMP NOT NULL        
    , job_id        VARCHAR(10) NOT NULL REFERENCES jobs(job_id)
    , department_id INTEGER REFERENCES departments(department_id)
    , CONSTRAINT    jhist_date_interval
                    CHECK (end_date > start_date)
    , PRIMARY KEY (employee_id, start_date)
    ) ;
Я её заполнил значниями. Твоя задача написать мне запросы следующие:
1.Показать третью по величине зарплату среди всех сотрудников
2.Отобразить город сотрудника, чей идентификатор — 105.
3.Отображение сведений о сотрудниках, получающих самую высокую зарплату в отделе.
4.Отображение сведений о текущей работе для сотрудников, которые в прошлом работали ИТ-программистами.
5.Отобразить сведения об отделах, в которых максимальная зарплата превышает 10000 для сотрудников, которые работали в прошлом.
6.Отобразить отделы, в которые за последние два года не пришел ни один сотрудник
7.Отображение имени сотрудника, должности, даты начала и окончания предыдущих мест работы всех сотрудников с нулевым процентом комиссии.
8.Display details of manager who manages more than 5 employees.
9.Отображение названия страны, города и количества отделов, в которых работает более 5 сотрудников.
10.Отображение должности и средней зарплаты сотрудников, которые работали в прошлом.
11.Отобразить сотрудников, которые в прошлом не выполняли никакой работы.
12.Отображение вакансий, на которые сотрудники устроились в текущем году.
13.Отображение сведений об отделах, которыми руководит «Смит».
14.Отображение сведений об отделах, в которых максимальная зарплата превышает 10000.
15.Укажите месяц, в котором в любом отделе, расположенном в Сиднее, появилось более 5 сотрудников.
16.Отображение названия отдела, средней заработной платы и количества сотрудников с комиссией в отделе.
17.Отображение имени сотрудника и страны, в которой он работает.
18.Отображение имени сотрудника и должности для работ, которые сотрудник выполнял в прошлом, если работа длилась менее шести месяцев.
19.Display employee name if the employee joined before his manager.
20.Отображение названия отдела, имени менеджера и зарплаты менеджера для всех менеджеров, чей опыт работы превышает 5 лет.
21.Отображение сведений о работах, выполненных любым сотрудником, чья зарплата в настоящее время превышает 15000.
22.Отображение фамилий, должностей сотрудников, имеющих комиссионный процент и относящихся к отделу 30.
23.Отображение названия должности, имени сотрудника и разницы между максимальной заработной платой по должности и заработной платой сотрудника.
24.Отображение должности и средней зарплаты сотрудников
25.Отображение должности, названия отдела, фамилии сотрудника, даты начала работы для всех должностей с 2000 по 2005 год.
26.Отображение названия страны, города и названия отдела.



46.
SELECT salary
FROM (
    SELECT salary, DENSE_RANK() OVER (ORDER BY salary DESC) as rank
    FROM employees
) AS ranked_salaries
WHERE rank = 3
LIMIT 1;
45.
SELECT l.city
FROM employees e
JOIN departments d ON e.department_id = d.department_id
JOIN locations l ON d.location_id = l.location_id
WHERE e.employee_id = 105;
44.
SELECT e.*
FROM employees e
JOIN (
    SELECT department_id, MAX(salary) as max_salary
    FROM employees
    GROUP BY department_id
) dept_max ON e.department_id = dept_max.department_id
WHERE e.salary = dept_max.max_salary;
43.
SELECT e.*
FROM employees e
WHERE e.employee_id IN (
    SELECT DISTINCT jh.employee_id
    FROM job_history jh
    WHERE jh.job_id = 'IT_PROG'
);
42.
SELECT d.*
FROM departments d
WHERE d.department_id IN (
    SELECT department_id
    FROM employees
    WHERE employee_id IN (SELECT DISTINCT employee_id FROM job_history)
    GROUP BY department_id
    HAVING MAX(salary) > 10000
);
41.
SELECT d.*
FROM departments d
WHERE NOT EXISTS (
    SELECT 1
    FROM employees e
    WHERE e.department_id = d.department_id
    AND e.hire_date >= NOW() - INTERVAL '2 years'
);
40.
SELECT e.first_name, e.last_name, jh.*
FROM employees e
JOIN job_history jh ON e.employee_id = jh.employee_id
WHERE e.commission_pct = 0;
39.
SELECT m.*
FROM employees m
WHERE m.employee_id IN (
    SELECT manager_id
    FROM employees
    GROUP BY manager_id
    HAVING COUNT(*) > 5
);
38.
SELECT c.country_name, l.city, COUNT(d.department_id) as dept_count
FROM departments d
JOIN locations l ON d.location_id = l.location_id
JOIN countries c ON l.country_id = c.country_id
WHERE d.department_id IN (
    SELECT department_id
    FROM employees
    GROUP BY department_id
    HAVING COUNT(*) > 5
)
GROUP BY c.country_name, l.city;
37.
SELECT j.job_title, AVG(e.salary)
FROM employees e
JOIN jobs j ON e.job_id = j.job_id
WHERE e.employee_id IN (SELECT DISTINCT employee_id FROM job_history)
GROUP BY j.job_title;
36.
SELECT *
FROM employees
WHERE employee_id NOT IN (SELECT DISTINCT employee_id FROM job_history);
35.
SELECT j.job_title, COUNT(*)
FROM employees e
JOIN jobs j ON e.job_id = j.job_id
WHERE EXTRACT(YEAR FROM hire_date) = EXTRACT(YEAR FROM NOW())
GROUP BY j.job_title;
34.
SELECT d.*
FROM departments d
JOIN employees m ON d.manager_id = m.employee_id
WHERE m.last_name = 'Smith';
33.
SELECT d.*
FROM departments d
WHERE d.department_id IN (
    SELECT department_id
    FROM employees
    GROUP BY department_id
    HAVING MAX(salary) > 10000
);
32.
SELECT EXTRACT(MONTH FROM hire_date) as month
FROM employees e
JOIN departments d ON e.department_id = d.department_id
JOIN locations l ON d.location_id = l.location_id
WHERE l.city = 'Sydney'
GROUP BY month
HAVING COUNT(*) > 5;
31.
SELECT d.department_name, AVG(e.salary), COUNT(e.commission_pct)
FROM departments d
LEFT JOIN employees e ON d.department_id = e.department_id
GROUP BY d.department_name;
30.
SELECT e.first_name, c.country_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id
JOIN locations l ON d.location_id = l.location_id
JOIN countries c ON l.country_id = c.country_id;
29.
SELECT e.last_name, j.job_title
FROM job_history jh
JOIN employees e ON jh.employee_id = e.employee_id
JOIN jobs j ON jh.job_id = j.job_id
WHERE jh.end_date < jh.start_date + INTERVAL '6 months';
28.
SELECT e.first_name, e.last_name
FROM employees e
JOIN employees m ON e.manager_id = m.employee_id
WHERE e.hire_date < m.hire_date;
27.
SELECT d.department_name, m.first_name, m.salary
FROM departments d
JOIN employees m ON d.manager_id = m.employee_id
WHERE AGE(NOW(), m.hire_date) > INTERVAL '5 years';
26.
SELECT jh.*
FROM job_history jh
JOIN employees e ON jh.employee_id = e.employee_id
WHERE e.salary > 15000;
25.
SELECT last_name, job_title
FROM employees e
JOIN jobs j ON e.job_id = j.job_id
WHERE commission_pct > 0 AND department_id = 30;
24.
SELECT j.job_title, e.first_name, (j.max_salary - e.salary) as diff
FROM employees e
JOIN jobs j ON e.job_id = j.job_id;
23.
SELECT job_title, AVG(salary)
FROM employees
JOIN jobs USING (job_id)
GROUP BY job_title;
22.
SELECT job_title, department_name, last_name, start_date
FROM job_history jh
JOIN jobs USING (job_id)
JOIN departments USING (department_id)
JOIN employees USING (employee_id)
WHERE start_date BETWEEN '2000-01-01' AND '2005-12-31';
21.
SELECT country_name, city, department_name
FROM departments
JOIN locations USING (location_id)
JOIN countries USING (country_id);

1.Отображение количества сотрудников, присоединившихся после 15-го числа месяца.
2.Отобразить идентификатор страны и количество городов в стране.
3.Отображение средней зарплаты сотрудников в каждом отделе, имеющих комиссионный процент.
4.Отображение идентификатора должности, количества сотрудников, суммы заработной платы и разницы между самой высокой и самой низкой зарплатой сотрудников данной должности.
5.Отображение идентификатора вакансии для вакансий со средней зарплатой более 10000.
6.Отобразить годы, в которые к компании присоединилось более 10 сотрудников.
7.Отобразить отделы, в которых более пяти сотрудников имеют комиссионный процент.
8.Отображение идентификатора сотрудника, который в прошлом выполнял более одной работы.
9.Отображение идентификаторов заданий, которые выполнялись более чем 3 сотрудниками в течение более 100 дней.
10.Отображение идентификатора отдела, года и количества присоединившихся сотрудников.
11.Отобразите отделы, в которых каждый менеджер руководит более чем 5 сотрудниками.
12.Измените зарплату сотрудника 115 на 8000, если текущая зарплата меньше 6000.
13.Добавьте нового сотрудника в список сотрудников со всеми необходимыми данными.
14.Удалить отдел 20.
15.Измените идентификатор работы сотрудника 110 на IT_PROG, если сотрудник относится к отделу 10 и существующий идентификатор работы не начинается с IT.
16.Вставьте строку в таблицу отделов с идентификатором  150 
17.Отображение названия отдела и количества сотрудников в отделе.
18.Отображение названия должности, идентификатора сотрудника, количества дней между датой окончания и датой начала для всех должностей в отделе 30 из истории должностей.
19.Отображение названия отдела и имени менеджера
20.Отображение названия отдела, имени менеджера и города.



1.
SELECT COUNT(*) 
FROM employees 
WHERE EXTRACT(DAY FROM hire_date) > 15;
2.
SELECT c.country_id, COUNT(DISTINCT l.city) 
FROM countries c 
LEFT JOIN locations l USING(country_id)
GROUP BY c.country_id;
3.
SELECT department_id, AVG(salary) 
FROM employees 
WHERE commission_pct IS NOT NULL 
GROUP BY department_id;
4.
SELECT job_id, 
       COUNT(*) AS emp_count,
       SUM(salary) AS total_salary,
       MAX(salary) - MIN(salary) AS salary_diff
FROM employees 
GROUP BY job_id;
5.
SELECT job_id 
FROM employees 
GROUP BY job_id 
HAVING AVG(salary) > 10000;
6.
SELECT EXTRACT(YEAR FROM hire_date) AS year 
FROM employees 
GROUP BY year 
HAVING COUNT(*) > 10;
7.
SELECT department_id 
FROM employees 
WHERE commission_pct IS NOT NULL 
GROUP BY department_id 
HAVING COUNT(*) > 5;
8.
SELECT employee_id 
FROM job_history 
GROUP BY employee_id 
HAVING COUNT(*) > 1;
9.
SELECT job_id 
FROM job_history 
WHERE (end_date - start_date) > 100 
GROUP BY job_id 
HAVING COUNT(DISTINCT employee_id) > 3;
10.
SELECT department_id,
       EXTRACT(YEAR FROM hire_date) AS year,
       COUNT(*) 
FROM employees 
GROUP BY department_id, year;
11.
SELECT d.department_id 
FROM departments d 
WHERE d.manager_id IN (
    SELECT manager_id 
    FROM employees 
    GROUP BY manager_id 
    HAVING COUNT(*) > 5
);
12.
UPDATE employees 
SET salary = 8000 
WHERE employee_id = 115 
AND salary < 6000;
13.
INSERT INTO employees 
(employee_id, first_name, last_name, email, hire_date, job_id)
VALUES 
(1001, 'John', 'Doe', 'jdoe@mail.com', CURRENT_TIMESTAMP, 'IT_PROG');
14.
DELETE FROM departments 
WHERE department_id = 20;
15.
UPDATE employees 
SET job_id = 'IT_PROG' 
WHERE employee_id = 110 
AND department_id = 10 
AND job_id NOT LIKE 'IT%';
16.
INSERT INTO departments 
(department_id, department_name) 
VALUES (150, 'New Department');
17.
SELECT d.department_name, COUNT(e.employee_id) 
FROM departments d 
LEFT JOIN employees e USING(department_id)
GROUP BY d.department_name;
18.
SELECT j.job_title, 
       jh.employee_id, 
       (jh.end_date - jh.start_date) AS days
FROM job_history jh
JOIN jobs j USING(job_id)
WHERE jh.department_id = 30;
19.
SELECT d.department_name, 
       e.first_name || ' ' || e.last_name AS manager_name
FROM departments d 
LEFT JOIN employees e ON d.manager_id = e.employee_id;
20.
SELECT d.department_name, 
       e.first_name || ' ' || e.last_name AS manager_name,
       l.city
FROM departments d 
JOIN employees e ON d.manager_id = e.employee_id
JOIN locations l USING(location_id);
